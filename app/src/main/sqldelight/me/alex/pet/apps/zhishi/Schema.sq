DROP TABLE IF EXISTS rule_core;
DROP TABLE IF EXISTS rule_content_fts;
DROP VIEW IF EXISTS rule;
DROP TABLE IF EXISTS section_core;
DROP TABLE IF EXISTS section_name_fts;
DROP VIEW IF EXISTS section;
DROP TABLE IF EXISTS chapter;
DROP TABLE IF EXISTS part;

--
-- Part
--
CREATE TABLE part (
	id INTEGER PRIMARY KEY,
	name TEXT NOT NULL
);


--
-- Chapter
--
CREATE TABLE chapter(
	id INTEGER PRIMARY KEY,
	part_id INTEGER NOT NULL,
	name TEXT NOT NULL,
	FOREIGN KEY (part_id) REFERENCES part(id) ON DELETE CASCADE ON UPDATE CASCADE
);


--
-- Section
--
CREATE TABLE section_core (
	id INTEGER PRIMARY KEY,
	chapter_id INTEGER NOT NULL,
    name TEXT NOT NULL,
	markup TEXT NOT NULL,
	FOREIGN KEY (chapter_id) REFERENCES chapter(id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE VIRTUAL TABLE section_name_fts
USING fts4(tokenize=unicode61, content="section_core", name TEXT NOT NULL);

CREATE TRIGGER section_core_before_upd_update_fts_index BEFORE UPDATE ON section_core BEGIN
    DELETE FROM section_name_fts WHERE docid=old.rowid;
END;

CREATE TRIGGER section_core_before_del_update_fts_index BEFORE DELETE ON section_core BEGIN
    DELETE FROM section_name_fts WHERE docid=old.rowid;
END;

CREATE TRIGGER section_core_after_upd_update_fts_index AFTER UPDATE ON section_core BEGIN
    INSERT INTO section_name_fts(docid, name) VALUES (new.rowid, new.name);
END;

CREATE TRIGGER section_core_after_ins_update_fts_index AFTER INSERT ON section_core BEGIN
    INSERT INTO section_name_fts(docid, name) VALUES (new.rowid, new.name);
END;

CREATE VIEW section AS
SELECT
    section_core.id AS id,
    section_core.chapter_id AS chapter_id,
    section_name_fts.name AS name,
    section_core.markup AS markup
FROM section_core JOIN section_name_fts ON section_core.rowid = section_name_fts.rowid;

CREATE TRIGGER on_section_insert INSTEAD OF INSERT ON section
BEGIN
	INSERT INTO section_core(id, chapter_id, name, markup) VALUES (new.id, new.chapter_id, new.name, new.markup);
END;

CREATE TRIGGER on_section_del INSTEAD OF DELETE ON section
BEGIN
	DELETE FROM section_core WHERE id = old.id;
END;

CREATE TRIGGER on_section_upd INSTEAD OF UPDATE ON section
BEGIN
	UPDATE section_core
    SET
        id = new.id,
        chapter_id = new.chapter_id,
        name = new.name,
        markup = new.markup
    WHERE id = old.id;
END;


--
-- Rule
--
CREATE TABLE rule_core (
	id INTEGER PRIMARY KEY,
	section_id INTEGER NOT NULL,
	number INTEGER as Int UNIQUE NOT NULL,
    content TEXT NOT NULL,
	markup TEXT NOT NULL,
	FOREIGN KEY (section_id) REFERENCES section_core(id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE VIRTUAL TABLE rule_content_fts
USING fts4(tokenize=unicode61, content="rule_core", content TEXT NOT NULL);

CREATE TRIGGER rule_core_before_upd_update_fts_index BEFORE UPDATE ON rule_core BEGIN
    DELETE FROM rule_content_fts WHERE docid=old.rowid;
END;

CREATE TRIGGER rule_core_before_del_update_fts_index BEFORE DELETE ON rule_core BEGIN
    DELETE FROM rule_content_fts WHERE docid=old.rowid;
END;

CREATE TRIGGER rule_core_after_upd_update_fts_index AFTER UPDATE ON rule_core BEGIN
    INSERT INTO rule_content_fts(docid, content) VALUES (new.rowid, new.content);
END;

CREATE TRIGGER rule_core_after_ins_update_fts_index AFTER INSERT ON rule_core BEGIN
    INSERT INTO rule_content_fts(docid, content) VALUES (new.rowid, new.content);
END;

CREATE VIEW rule AS
SELECT
    rule_core.id AS id,
    rule_core.section_id AS section_id,
    rule_core.number AS number,
    rule_content_fts.content AS content,
    rule_core.markup AS markup
FROM rule_core JOIN rule_content_fts ON rule_core.rowid = rule_content_fts.rowid;

CREATE TRIGGER on_rule_insert INSTEAD OF INSERT ON rule
BEGIN
	INSERT INTO rule_core(id, section_id, number, content, markup) VALUES (new.id, new.section_id, new.number, new.content, new.markup);
END;

CREATE TRIGGER on_rule_del INSTEAD OF DELETE ON rule
BEGIN
	DELETE FROM rule_core WHERE id = old.id;
END;

CREATE TRIGGER on_rule_upd INSTEAD OF UPDATE ON rule
BEGIN
	UPDATE rule_core
    SET
        id = new.id,
        section_id = new.section_id,
        number = new.number,
        content = new.content,
        markup = new.markup
    WHERE id = old.id;
END;

CREATE INDEX number_index ON rule_core (number);

CREATE INDEX section_id_index ON rule_core (section_id);