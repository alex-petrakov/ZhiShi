CREATE TABLE rule_core (
	id INTEGER PRIMARY KEY,
	section_id INTEGER NOT NULL,
	annotation TEXT NOT NULL,
	annotation_markup TEXT NOT NULL,
    content TEXT NOT NULL,
	content_markup TEXT NOT NULL,
	FOREIGN KEY (section_id) REFERENCES section_core(id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE VIRTUAL TABLE rule_content_fts
USING fts4(tokenize=unicode61, content="rule_core", content TEXT NOT NULL);

CREATE TRIGGER rule_core_before_upd_update_fts_index BEFORE UPDATE ON rule_core BEGIN
    DELETE FROM rule_content_fts WHERE docid=old.rowid;
END;

CREATE TRIGGER rule_core_before_del_update_fts_index BEFORE DELETE ON rule_core BEGIN
    DELETE FROM rule_content_fts WHERE docid=old.rowid;
END;

CREATE TRIGGER rule_core_after_upd_update_fts_index AFTER UPDATE ON rule_core BEGIN
    INSERT INTO rule_content_fts(docid, content) VALUES (new.rowid, new.content);
END;

CREATE TRIGGER rule_core_after_ins_update_fts_index AFTER INSERT ON rule_core BEGIN
    INSERT INTO rule_content_fts(docid, content) VALUES (new.rowid, new.content);
END;

CREATE VIEW rule AS
SELECT
    rule_core.id AS id,
    rule_core.section_id AS section_id,
    rule_core.annotation AS annotation,
    rule_core.annotation_markup AS annotation_markup,
    rule_content_fts.content AS content,
    rule_core.content_markup AS content_markup
FROM rule_core JOIN rule_content_fts ON rule_core.rowid = rule_content_fts.rowid;

CREATE TRIGGER on_rule_insert INSTEAD OF INSERT ON rule
BEGIN
	INSERT INTO rule_core(id, section_id, annotation, annotation_markup, content, content_markup)
    VALUES (new.id, new.section_id, new.annotation, new.annotation_markup, new.content, new.content_markup);
END;

CREATE TRIGGER on_rule_del INSTEAD OF DELETE ON rule
BEGIN
    DELETE FROM rule_core WHERE id = old.id;
END;

CREATE TRIGGER on_rule_upd INSTEAD OF UPDATE ON rule
BEGIN
	UPDATE rule_core
    SET
        id = new.id,
        section_id = new.section_id,
        annotation = new.annotation,
        annotation_markup = new.annotation_markup,
        content = new.content,
        content_markup = new.content_markup
    WHERE id = old.id;
END;

CREATE INDEX section_id_index ON rule_core (section_id);


findById:
SELECT * FROM rule WHERE id = ?;

findIdsOfRulesInSameSection:
SELECT id FROM rule WHERE section_id IN (SELECT section_id FROM rule WHERE id = ?) ORDER BY id ASC;

findIdAndAnnotationBySectionId:
SELECT id, annotation, annotation_markup FROM rule WHERE section_id = ? ORDER BY id ASC;

findByIds:
SELECT * FROM rule WHERE id IN :ids
ORDER BY id ASC;

findByContent:
SELECT
	rule_core.id,
	rule_core.section_id,
	snippet(rule_content_fts, '', '', '...') AS snippet,
	rule_core.content_markup
FROM rule_content_fts INNER JOIN rule_core ON rule_content_fts.rowid = rule_core.rowid
WHERE rule_content_fts.content MATCH :searchQuery
ORDER BY length(offsets(rule_content_fts)) DESC LIMIT :limit;